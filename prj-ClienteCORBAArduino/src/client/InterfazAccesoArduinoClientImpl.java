package client;

import java.io.BufferedReader;
/*
 * The client implementation is generated by the ORB Studio.
 */
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.PrintWriter;
import java.util.Properties;

import org.omg.CosNaming.NamingContextExt;
import org.omg.CosNaming.NamingContextExtHelper;

class InterfazAccesoArduinoClientImpl {
	private corba.InterfazAccesoArduino target = null;
	private org.omg.CORBA.ORB orb = null;

	/**
	 * Constructor for InterfazAccesoArduinoClientImpl
	 * 
	 * @throws IOException
	 */
	public InterfazAccesoArduinoClientImpl() throws IOException {
		initORB(null);
	}

	/**
	 * Constructor for InterfazAccesoArduinoClientImpl
	 * 
	 * @throws IOException
	 * @see java.lang.Object#Object()
	 */
	public InterfazAccesoArduinoClientImpl(String[] args) throws IOException {
		initORB(args);
	}

	/**
	 * Initialize ORB.
	 * 
	 * @param args
	 * @throws IOException
	 */
	public void initORB(String[] args) throws IOException {

		Properties props = System.getProperties();
		props.setProperty("org.omg.CORBA.ORBClass", "com.sun.corba.se.internal.POA.POAORB");
		props.setProperty("org.omg.CORBA.ORBSingletonClass", "com.sun.corba.se.internal.corba.ORBSingleton");

		// Añadimos estas líneas para indicar el Host y el Puerto del servicio
		// de nombres. Comentar si no usamos el servicio de nombres.
		props.setProperty("org.omg.CORBA.ORBInitialHost", "localhost");
		props.setProperty("org.omg.CORBA.ORBInitialPort", "1050");
		try {
			// Initialize the ORB
			orb = org.omg.CORBA.ORB.init((String[]) args, props);

			// ---- Uncomment below to enable Naming Service access. ----
			 org.omg.CORBA.Object ncobj = orb.resolve_initial_references("NameService");
			 NamingContextExt nc = NamingContextExtHelper.narrow(ncobj);
			 org.omg.CORBA.Object obj = nc.resolve_str("ServidorCORBA_AccesoArduino");

			// Líneas a comentar en caso de usar el servicio de nombres en lugar
			// del fichero .ior
			// LineNumberReader input = new LineNumberReader(new
			// FileReader("server.ior"));
			// String ior = input.readLine();
			// org.omg.CORBA.Object obj = orb.string_to_object(ior);

			target = corba.InterfazAccesoArduinoHelper.narrow(obj);

		} catch (Exception ex) {
			ex.printStackTrace();
			System.out.println("Error en la parte del cliente con el servicio de nombres");
		}
	}

	/**
	 * Obtain ORB Interface.
	 * 
	 * @return
	 */
	public corba.InterfazAccesoArduino getORBInterface() {
		return target;
	}

	/**
	 * Shutdown ORB.
	 */
	public void shutdown() {
		orb.shutdown(true);
	}

	/**
	 * Test driver for InterfazAccesoArduinoClientImpl.
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		try {
			InterfazAccesoArduinoClientImpl test = new InterfazAccesoArduinoClientImpl();

			// test.getORBInterface().operation1("A message in the bottle...");

			BufferedReader stdIn = new BufferedReader(new InputStreamReader(System.in));
			PrintWriter stdOut = new PrintWriter(System.out);
			String input, output, fin;

			input = "";
			fin = "fin";
			while (!input.equals(fin)) {
				stdOut.println("Escriba orden para enviar a Arduino...");
				stdOut.flush();
				// EJERCICIO: Leer de teclado
				input = stdIn.readLine();
				// EJERCICIO: Enviar la orden al Arduino invocando el método
				// correspondiente del objeto AA
				output = test.getORBInterface().enviarOrdenArduino(input);
				// EJERCICIO: Imprimir por pantalla el resultado obtenido
				stdOut.println(output);
				stdOut.flush();
			}

			test.shutdown();
		} catch (IOException ex) {
			ex.printStackTrace();
		}
	}
}
